#ifndef __INC_DRVINTERFACE_HPP__
#define __INC_DRVINTERFACE_HPP__

//
// This header describes communication with driver dll.
//
// The driver has to export single function with the name "DVBDRIVER_IOCTL".
// Prototype for this function is at the bottom of this file,
// parameters used in the section IOCTL commands.
//
// Driver must implement classes derived from following classes:
//	BaseInpDriver (comIo.hpp)
//	ComOut		  (comIo.hpp)
//
// Further important classes are defined in following headers:
//	MuxPacket.hpp
//


// Structures describing driver properties

struct DvbDriverSrvProps
{
	enum Flags
	{
		UsesReedSolomon		= 0x01,	// 0: 188 By packets, else 204 By packets
		GeneratesPSITables	= 0x02,	// 1: driver generates PSI/SI tables
		GeneratesClock		= 0x04,	// 0: output clock (frequency) is generated by the output card
	} ;
	char  commInterface[32] ;		// "DVB ASI", "RS-422 synch."
	ULONG flags ;					// bits listed in enum Flags
	float outputRate ;				// Mb/s = MHz (1 Mb/s = 1000000 b/s); 0 means unknown
	char  reserved[12] ;			// must be 0
} ;

struct DvbDriverRcvProps
{
	char  cardName[32] ;			//
	ULONG flags ;					// 0
	char  reserved[12] ;			// must be 0
} ;


//-------------------------------------------------------------------------
// IOCTL commands
//-------------------------------------------------------------------------


//
// Each command has 3 arguments. Their meaning is described in comments after command code.
//

//
// To introduce driver-dependent commands use values (DVBDRV_UserCommand+i)
//
#define DVBDRV_UserCommand		10000

enum DVBDRV_InstallFlags
{
	eDVBDRV_InstallServer	= 1,	// 1:Server , 0:Receiver
	eDVBDRV_Uninstall		= 2,	// 1:Install, 0:Uninstall
} ;

//
// List of standard commands 
//
enum DVBDRV_COMMANDS
{
	// Command used by the Setup program
	// It is used both for the installation and uninstallation.
	// Installation includes also eventual upgrade from the old version.
	//	installFlags = combination of DVBDRV_InstallFlags
	//	cfg = application config class
	//
	// If the action fails or needs some supplementary actions to be performed outside
	// the application, the user should be presented with detailed explanation.
	DVBDRV_Install			 = 0,	// (HWND parent, int installFlags, ConfigClass *cfg)

	//
	//----------------------------------------------------------
	//	Basic commands (can be called at any time)
	//

	// Get driver version.
	// 1st command sent to the driver.
	// The driver will not be loaded if <major> is not equal to 1.
	DVBDRV_GetDrvVersion	 = 1,	// (long *major, long *minor, 0)

	// Get driver name
	DVBDRV_DrvName			 = 2,	// (LPSTR lpBuffer, UINT uBuffSize, 0 )

	// Driver initialization.
	// usePesHeader should be copied into global variable BOOL USE_PESHEADER.
	DVBDRV_Init				 = 3,	// (BOOL runningAsServer, BOOL usePesHeader, MessageHookType messageHook )

	// Must be called once for each DVBDRV_Init
	DVBDRV_Close			 = 4,	// (0, 0, 0)

	// Fills the buffer buf[bufSize] with the description of the last error.
	DVBDRV_GetLastError		 = 5,	// (char *buf, int bufSize, 0)

	// Conversion of driver error code into text
	// Driver should use Facility_IO (dvbError.hpp) for error coding.
	// E.g. any internal code (0..0xFFFF) should be returned as (Event_IOErrorFlag | code).
	DVBDRV_EventAsText		 = 6,	// (int code, char *buf, 0)

	//
	//----------------------------------------------------------
	//	Data processing tools
	//
	// These commands can be called only inbetween DVBDRV_Init and DVBDRV_Close.
	//

	// Creation/deletion of ComIO objects
	DVBDRV_NewComInp		 = 7,	// (ComInp **x, BaseComInp *s, BaseConfigClass *cfg)
	DVBDRV_DelComInp		 = 8,	// (ComInp  *x, 0, 0)

	DVBDRV_NewComOut		 = 9,	// (ComOut **x, BaseConfigClass *cfg, 0)
	DVBDRV_DelComOut		 = 10,	// (ComOut  *x, 0, 0)

	//
	//----------------------------------------------------------
	//	Utilities
	//

	// Optional command (Capability: ComIO_SetupDialog)
	// Run modal device setup dialog.
	// Output: <ret> = TRUE iff the setup dialog closed via OK press
	// Remark:
	// The service can be called at any time. If called inbetween DVBDRV_NewCom* and
	// DVBDRV_DelCom*, the setup dialog should run in read-only mode.
	DVBDRV_RunSetupDialog	 = 11,	// (CWnd *parent, ConfigClass *cfg, BOOL *ret )

	// Optional command (Capability: ComIO_DriverStatusDlg)
	// Driver should display (and periodically update) dialog showing its internal variables.
	DVBDRV_DriverStateDialog = 12,	// (CWnd *parent, 0, 0 )

	// Optional command (Capability: ComIO_DriverDump)
	// Called by the Receiver whenever connection is lost.
	// Driver may e.g. react by saving driver-definable information to the disk.
	DVBDRV_DriverDump		 = 13,	// (0,0,0)

	// Compulsory command
	// Returns driver, resp. output card characteristics
	//	data = DvbDriverRcvProps, resp. DvbDriverSrvProps depending on <asServer>
	//	asServer = 0-receiver, else: server
	DVBDRV_DriverProps		 = 14,	// (void *data, BOOL asServer,0)
} ;


/*-------------------------------------------------------------------------
// Workflow
//-------------------------------------------------------------------------

  Typical working sequence (for a driver which was already installed):

	//	load driver dll
	//	Test driver version					DVBDRV_GetDrvVersion
	//	Initialization						DVBDRV_Init
	//	Create data channel					DVBDRV_NewComInp/Out
	//	...
	//	Work with data channel and/or
	//	call utility ioctl commands.
	//	...
	//	Destroy data channel				DVBDRV_DelComInp/Out
	//	Termination							DVBDRV_Close

  DVBDRV_RunSetupDialog can be called at any time inbetween DVBDRV_Init and DVBDRV_Close.

*/

//-------------------------------------------------------------------------
//	Ioctl function
//-------------------------------------------------------------------------


// Return status from IOCTL function.
enum IOCTL_RETURN_STATUS
{
	IOCTLRET_OK			= 0,	// command execution succeeded; last error unchanged
	IOCTLRET_ERROR		= 1,	// command execution failed; driver sets last error
	IOCTLRET_UNSUPPORTED= 2,	// command not supported; last error unchanged
	IOCTLRET_WARNING	= 3,	// command execution succeeded; last error contains warning
} ;

//
// Basic function dispatching each command call.
// This is the single function which has to to be exported as "DVBDRIVER_IOCTL" from driver dll.
//
// DRIVER_IOCTL must not throw an exception. The driver must store the reason for the last
// execution error so that it can be queried via DVBDRV_GetLastError command.
//
typedef IOCTL_RETURN_STATUS (*DVBDRIVER_IOCTL)	( DVBDRV_COMMANDS cmd, long par1, long par2, long par3 ) ;

typedef BOOL (*MessageHookType)( UINT msg, long wParam=0, long lParam=0 ) ;

#endif
